/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef KeyWordsToVector_H
#define KeyWordsToVector_H

#include <thrift/TDispatchProcessor.h>
#include "query_types.h"

namespace com { namespace mediav { namespace query {

class KeyWordsToVectorIf {
 public:
  virtual ~KeyWordsToVectorIf() {}
  virtual void keywordsToVector(ResponseVector& _return, const KeyWords& request) = 0;
  virtual void keywordsToVectors(std::vector<ResponseVector> & _return, const std::vector<KeyWords> & request) = 0;
  virtual void reload(Response& _return, const std::map<std::string, std::string> & conf) = 0;
  virtual PeerStatus::type GetPeerStatus() = 0;
  virtual int32_t getCurrentVersion() = 0;
  virtual void keywordsToVectorWithVersion(ResponseVector& _return, const KeyWords& request, const int32_t ktvVersion) = 0;
  virtual void keywordsToVectorsWithVersion(std::vector<ResponseVector> & _return, const std::vector<KeyWords> & request, const int32_t ktvVersion) = 0;
  virtual void keywordCreativeToFeatures(KeywordCreativeResponse& _return, const KeywordCreative& request) = 0;
  virtual void batchKeywordCreativeToFeatures(std::vector<KeywordCreativeResponse> & _return, const std::vector<KeywordCreative> & request) = 0;
  virtual void reloadKeywordCreativeConfigure(Response& _return, const std::map<std::string, std::string> & conf) = 0;
};

class KeyWordsToVectorIfFactory {
 public:
  typedef KeyWordsToVectorIf Handler;

  virtual ~KeyWordsToVectorIfFactory() {}

  virtual KeyWordsToVectorIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(KeyWordsToVectorIf* /* handler */) = 0;
};

class KeyWordsToVectorIfSingletonFactory : virtual public KeyWordsToVectorIfFactory {
 public:
  KeyWordsToVectorIfSingletonFactory(const boost::shared_ptr<KeyWordsToVectorIf>& iface) : iface_(iface) {}
  virtual ~KeyWordsToVectorIfSingletonFactory() {}

  virtual KeyWordsToVectorIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(KeyWordsToVectorIf* /* handler */) {}

 protected:
  boost::shared_ptr<KeyWordsToVectorIf> iface_;
};

class KeyWordsToVectorNull : virtual public KeyWordsToVectorIf {
 public:
  virtual ~KeyWordsToVectorNull() {}
  void keywordsToVector(ResponseVector& /* _return */, const KeyWords& /* request */) {
    return;
  }
  void keywordsToVectors(std::vector<ResponseVector> & /* _return */, const std::vector<KeyWords> & /* request */) {
    return;
  }
  void reload(Response& /* _return */, const std::map<std::string, std::string> & /* conf */) {
    return;
  }
  PeerStatus::type GetPeerStatus() {
    PeerStatus::type _return = (PeerStatus::type)0;
    return _return;
  }
  int32_t getCurrentVersion() {
    int32_t _return = 0;
    return _return;
  }
  void keywordsToVectorWithVersion(ResponseVector& /* _return */, const KeyWords& /* request */, const int32_t /* ktvVersion */) {
    return;
  }
  void keywordsToVectorsWithVersion(std::vector<ResponseVector> & /* _return */, const std::vector<KeyWords> & /* request */, const int32_t /* ktvVersion */) {
    return;
  }
  void keywordCreativeToFeatures(KeywordCreativeResponse& /* _return */, const KeywordCreative& /* request */) {
    return;
  }
  void batchKeywordCreativeToFeatures(std::vector<KeywordCreativeResponse> & /* _return */, const std::vector<KeywordCreative> & /* request */) {
    return;
  }
  void reloadKeywordCreativeConfigure(Response& /* _return */, const std::map<std::string, std::string> & /* conf */) {
    return;
  }
};

typedef struct _KeyWordsToVector_keywordsToVector_args__isset {
  _KeyWordsToVector_keywordsToVector_args__isset() : request(false) {}
  bool request :1;
} _KeyWordsToVector_keywordsToVector_args__isset;

class KeyWordsToVector_keywordsToVector_args {
 public:

  static const char* ascii_fingerprint; // = "334F12B8DC11448C5738D3DDC42486B8";
  static const uint8_t binary_fingerprint[16]; // = {0x33,0x4F,0x12,0xB8,0xDC,0x11,0x44,0x8C,0x57,0x38,0xD3,0xDD,0xC4,0x24,0x86,0xB8};

  KeyWordsToVector_keywordsToVector_args(const KeyWordsToVector_keywordsToVector_args&);
  KeyWordsToVector_keywordsToVector_args& operator=(const KeyWordsToVector_keywordsToVector_args&);
  KeyWordsToVector_keywordsToVector_args() {
  }

  virtual ~KeyWordsToVector_keywordsToVector_args() throw();
  KeyWords request;

  _KeyWordsToVector_keywordsToVector_args__isset __isset;

  void __set_request(const KeyWords& val);

  bool operator == (const KeyWordsToVector_keywordsToVector_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const KeyWordsToVector_keywordsToVector_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeyWordsToVector_keywordsToVector_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_keywordsToVector_args& obj);
};


class KeyWordsToVector_keywordsToVector_pargs {
 public:

  static const char* ascii_fingerprint; // = "334F12B8DC11448C5738D3DDC42486B8";
  static const uint8_t binary_fingerprint[16]; // = {0x33,0x4F,0x12,0xB8,0xDC,0x11,0x44,0x8C,0x57,0x38,0xD3,0xDD,0xC4,0x24,0x86,0xB8};


  virtual ~KeyWordsToVector_keywordsToVector_pargs() throw();
  const KeyWords* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_keywordsToVector_pargs& obj);
};

typedef struct _KeyWordsToVector_keywordsToVector_result__isset {
  _KeyWordsToVector_keywordsToVector_result__isset() : success(false) {}
  bool success :1;
} _KeyWordsToVector_keywordsToVector_result__isset;

class KeyWordsToVector_keywordsToVector_result {
 public:

  static const char* ascii_fingerprint; // = "FB6AC50F4D1F44E26A4B3F487215D228";
  static const uint8_t binary_fingerprint[16]; // = {0xFB,0x6A,0xC5,0x0F,0x4D,0x1F,0x44,0xE2,0x6A,0x4B,0x3F,0x48,0x72,0x15,0xD2,0x28};

  KeyWordsToVector_keywordsToVector_result(const KeyWordsToVector_keywordsToVector_result&);
  KeyWordsToVector_keywordsToVector_result& operator=(const KeyWordsToVector_keywordsToVector_result&);
  KeyWordsToVector_keywordsToVector_result() {
  }

  virtual ~KeyWordsToVector_keywordsToVector_result() throw();
  ResponseVector success;

  _KeyWordsToVector_keywordsToVector_result__isset __isset;

  void __set_success(const ResponseVector& val);

  bool operator == (const KeyWordsToVector_keywordsToVector_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const KeyWordsToVector_keywordsToVector_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeyWordsToVector_keywordsToVector_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_keywordsToVector_result& obj);
};

typedef struct _KeyWordsToVector_keywordsToVector_presult__isset {
  _KeyWordsToVector_keywordsToVector_presult__isset() : success(false) {}
  bool success :1;
} _KeyWordsToVector_keywordsToVector_presult__isset;

class KeyWordsToVector_keywordsToVector_presult {
 public:

  static const char* ascii_fingerprint; // = "FB6AC50F4D1F44E26A4B3F487215D228";
  static const uint8_t binary_fingerprint[16]; // = {0xFB,0x6A,0xC5,0x0F,0x4D,0x1F,0x44,0xE2,0x6A,0x4B,0x3F,0x48,0x72,0x15,0xD2,0x28};


  virtual ~KeyWordsToVector_keywordsToVector_presult() throw();
  ResponseVector* success;

  _KeyWordsToVector_keywordsToVector_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_keywordsToVector_presult& obj);
};

typedef struct _KeyWordsToVector_keywordsToVectors_args__isset {
  _KeyWordsToVector_keywordsToVectors_args__isset() : request(false) {}
  bool request :1;
} _KeyWordsToVector_keywordsToVectors_args__isset;

class KeyWordsToVector_keywordsToVectors_args {
 public:

  static const char* ascii_fingerprint; // = "BC804ACD85E1D08B3BD5DC838B8FE164";
  static const uint8_t binary_fingerprint[16]; // = {0xBC,0x80,0x4A,0xCD,0x85,0xE1,0xD0,0x8B,0x3B,0xD5,0xDC,0x83,0x8B,0x8F,0xE1,0x64};

  KeyWordsToVector_keywordsToVectors_args(const KeyWordsToVector_keywordsToVectors_args&);
  KeyWordsToVector_keywordsToVectors_args& operator=(const KeyWordsToVector_keywordsToVectors_args&);
  KeyWordsToVector_keywordsToVectors_args() {
  }

  virtual ~KeyWordsToVector_keywordsToVectors_args() throw();
  std::vector<KeyWords>  request;

  _KeyWordsToVector_keywordsToVectors_args__isset __isset;

  void __set_request(const std::vector<KeyWords> & val);

  bool operator == (const KeyWordsToVector_keywordsToVectors_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const KeyWordsToVector_keywordsToVectors_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeyWordsToVector_keywordsToVectors_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_keywordsToVectors_args& obj);
};


class KeyWordsToVector_keywordsToVectors_pargs {
 public:

  static const char* ascii_fingerprint; // = "BC804ACD85E1D08B3BD5DC838B8FE164";
  static const uint8_t binary_fingerprint[16]; // = {0xBC,0x80,0x4A,0xCD,0x85,0xE1,0xD0,0x8B,0x3B,0xD5,0xDC,0x83,0x8B,0x8F,0xE1,0x64};


  virtual ~KeyWordsToVector_keywordsToVectors_pargs() throw();
  const std::vector<KeyWords> * request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_keywordsToVectors_pargs& obj);
};

typedef struct _KeyWordsToVector_keywordsToVectors_result__isset {
  _KeyWordsToVector_keywordsToVectors_result__isset() : success(false) {}
  bool success :1;
} _KeyWordsToVector_keywordsToVectors_result__isset;

class KeyWordsToVector_keywordsToVectors_result {
 public:

  static const char* ascii_fingerprint; // = "6F388E20270CE78BCB69B35C11683711";
  static const uint8_t binary_fingerprint[16]; // = {0x6F,0x38,0x8E,0x20,0x27,0x0C,0xE7,0x8B,0xCB,0x69,0xB3,0x5C,0x11,0x68,0x37,0x11};

  KeyWordsToVector_keywordsToVectors_result(const KeyWordsToVector_keywordsToVectors_result&);
  KeyWordsToVector_keywordsToVectors_result& operator=(const KeyWordsToVector_keywordsToVectors_result&);
  KeyWordsToVector_keywordsToVectors_result() {
  }

  virtual ~KeyWordsToVector_keywordsToVectors_result() throw();
  std::vector<ResponseVector>  success;

  _KeyWordsToVector_keywordsToVectors_result__isset __isset;

  void __set_success(const std::vector<ResponseVector> & val);

  bool operator == (const KeyWordsToVector_keywordsToVectors_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const KeyWordsToVector_keywordsToVectors_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeyWordsToVector_keywordsToVectors_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_keywordsToVectors_result& obj);
};

typedef struct _KeyWordsToVector_keywordsToVectors_presult__isset {
  _KeyWordsToVector_keywordsToVectors_presult__isset() : success(false) {}
  bool success :1;
} _KeyWordsToVector_keywordsToVectors_presult__isset;

class KeyWordsToVector_keywordsToVectors_presult {
 public:

  static const char* ascii_fingerprint; // = "6F388E20270CE78BCB69B35C11683711";
  static const uint8_t binary_fingerprint[16]; // = {0x6F,0x38,0x8E,0x20,0x27,0x0C,0xE7,0x8B,0xCB,0x69,0xB3,0x5C,0x11,0x68,0x37,0x11};


  virtual ~KeyWordsToVector_keywordsToVectors_presult() throw();
  std::vector<ResponseVector> * success;

  _KeyWordsToVector_keywordsToVectors_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_keywordsToVectors_presult& obj);
};

typedef struct _KeyWordsToVector_reload_args__isset {
  _KeyWordsToVector_reload_args__isset() : conf(false) {}
  bool conf :1;
} _KeyWordsToVector_reload_args__isset;

class KeyWordsToVector_reload_args {
 public:

  static const char* ascii_fingerprint; // = "5EA2D527ECA3BA20C77AFC023EE8C05F";
  static const uint8_t binary_fingerprint[16]; // = {0x5E,0xA2,0xD5,0x27,0xEC,0xA3,0xBA,0x20,0xC7,0x7A,0xFC,0x02,0x3E,0xE8,0xC0,0x5F};

  KeyWordsToVector_reload_args(const KeyWordsToVector_reload_args&);
  KeyWordsToVector_reload_args& operator=(const KeyWordsToVector_reload_args&);
  KeyWordsToVector_reload_args() {
  }

  virtual ~KeyWordsToVector_reload_args() throw();
  std::map<std::string, std::string>  conf;

  _KeyWordsToVector_reload_args__isset __isset;

  void __set_conf(const std::map<std::string, std::string> & val);

  bool operator == (const KeyWordsToVector_reload_args & rhs) const
  {
    if (!(conf == rhs.conf))
      return false;
    return true;
  }
  bool operator != (const KeyWordsToVector_reload_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeyWordsToVector_reload_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_reload_args& obj);
};


class KeyWordsToVector_reload_pargs {
 public:

  static const char* ascii_fingerprint; // = "5EA2D527ECA3BA20C77AFC023EE8C05F";
  static const uint8_t binary_fingerprint[16]; // = {0x5E,0xA2,0xD5,0x27,0xEC,0xA3,0xBA,0x20,0xC7,0x7A,0xFC,0x02,0x3E,0xE8,0xC0,0x5F};


  virtual ~KeyWordsToVector_reload_pargs() throw();
  const std::map<std::string, std::string> * conf;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_reload_pargs& obj);
};

typedef struct _KeyWordsToVector_reload_result__isset {
  _KeyWordsToVector_reload_result__isset() : success(false) {}
  bool success :1;
} _KeyWordsToVector_reload_result__isset;

class KeyWordsToVector_reload_result {
 public:

  static const char* ascii_fingerprint; // = "3C2CE52840016AA59F143EA313E72A8C";
  static const uint8_t binary_fingerprint[16]; // = {0x3C,0x2C,0xE5,0x28,0x40,0x01,0x6A,0xA5,0x9F,0x14,0x3E,0xA3,0x13,0xE7,0x2A,0x8C};

  KeyWordsToVector_reload_result(const KeyWordsToVector_reload_result&);
  KeyWordsToVector_reload_result& operator=(const KeyWordsToVector_reload_result&);
  KeyWordsToVector_reload_result() {
  }

  virtual ~KeyWordsToVector_reload_result() throw();
  Response success;

  _KeyWordsToVector_reload_result__isset __isset;

  void __set_success(const Response& val);

  bool operator == (const KeyWordsToVector_reload_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const KeyWordsToVector_reload_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeyWordsToVector_reload_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_reload_result& obj);
};

typedef struct _KeyWordsToVector_reload_presult__isset {
  _KeyWordsToVector_reload_presult__isset() : success(false) {}
  bool success :1;
} _KeyWordsToVector_reload_presult__isset;

class KeyWordsToVector_reload_presult {
 public:

  static const char* ascii_fingerprint; // = "3C2CE52840016AA59F143EA313E72A8C";
  static const uint8_t binary_fingerprint[16]; // = {0x3C,0x2C,0xE5,0x28,0x40,0x01,0x6A,0xA5,0x9F,0x14,0x3E,0xA3,0x13,0xE7,0x2A,0x8C};


  virtual ~KeyWordsToVector_reload_presult() throw();
  Response* success;

  _KeyWordsToVector_reload_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_reload_presult& obj);
};


class KeyWordsToVector_GetPeerStatus_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  KeyWordsToVector_GetPeerStatus_args(const KeyWordsToVector_GetPeerStatus_args&);
  KeyWordsToVector_GetPeerStatus_args& operator=(const KeyWordsToVector_GetPeerStatus_args&);
  KeyWordsToVector_GetPeerStatus_args() {
  }

  virtual ~KeyWordsToVector_GetPeerStatus_args() throw();

  bool operator == (const KeyWordsToVector_GetPeerStatus_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const KeyWordsToVector_GetPeerStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeyWordsToVector_GetPeerStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_GetPeerStatus_args& obj);
};


class KeyWordsToVector_GetPeerStatus_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~KeyWordsToVector_GetPeerStatus_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_GetPeerStatus_pargs& obj);
};

typedef struct _KeyWordsToVector_GetPeerStatus_result__isset {
  _KeyWordsToVector_GetPeerStatus_result__isset() : success(false) {}
  bool success :1;
} _KeyWordsToVector_GetPeerStatus_result__isset;

class KeyWordsToVector_GetPeerStatus_result {
 public:

  static const char* ascii_fingerprint; // = "F1BC2174724B9D2E335CD95F6D6F9367";
  static const uint8_t binary_fingerprint[16]; // = {0xF1,0xBC,0x21,0x74,0x72,0x4B,0x9D,0x2E,0x33,0x5C,0xD9,0x5F,0x6D,0x6F,0x93,0x67};

  KeyWordsToVector_GetPeerStatus_result(const KeyWordsToVector_GetPeerStatus_result&);
  KeyWordsToVector_GetPeerStatus_result& operator=(const KeyWordsToVector_GetPeerStatus_result&);
  KeyWordsToVector_GetPeerStatus_result() : success((PeerStatus::type)0) {
  }

  virtual ~KeyWordsToVector_GetPeerStatus_result() throw();
  PeerStatus::type success;

  _KeyWordsToVector_GetPeerStatus_result__isset __isset;

  void __set_success(const PeerStatus::type val);

  bool operator == (const KeyWordsToVector_GetPeerStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const KeyWordsToVector_GetPeerStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeyWordsToVector_GetPeerStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_GetPeerStatus_result& obj);
};

typedef struct _KeyWordsToVector_GetPeerStatus_presult__isset {
  _KeyWordsToVector_GetPeerStatus_presult__isset() : success(false) {}
  bool success :1;
} _KeyWordsToVector_GetPeerStatus_presult__isset;

class KeyWordsToVector_GetPeerStatus_presult {
 public:

  static const char* ascii_fingerprint; // = "F1BC2174724B9D2E335CD95F6D6F9367";
  static const uint8_t binary_fingerprint[16]; // = {0xF1,0xBC,0x21,0x74,0x72,0x4B,0x9D,0x2E,0x33,0x5C,0xD9,0x5F,0x6D,0x6F,0x93,0x67};


  virtual ~KeyWordsToVector_GetPeerStatus_presult() throw();
  PeerStatus::type* success;

  _KeyWordsToVector_GetPeerStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_GetPeerStatus_presult& obj);
};


class KeyWordsToVector_getCurrentVersion_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  KeyWordsToVector_getCurrentVersion_args(const KeyWordsToVector_getCurrentVersion_args&);
  KeyWordsToVector_getCurrentVersion_args& operator=(const KeyWordsToVector_getCurrentVersion_args&);
  KeyWordsToVector_getCurrentVersion_args() {
  }

  virtual ~KeyWordsToVector_getCurrentVersion_args() throw();

  bool operator == (const KeyWordsToVector_getCurrentVersion_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const KeyWordsToVector_getCurrentVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeyWordsToVector_getCurrentVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_getCurrentVersion_args& obj);
};


class KeyWordsToVector_getCurrentVersion_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~KeyWordsToVector_getCurrentVersion_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_getCurrentVersion_pargs& obj);
};

typedef struct _KeyWordsToVector_getCurrentVersion_result__isset {
  _KeyWordsToVector_getCurrentVersion_result__isset() : success(false) {}
  bool success :1;
} _KeyWordsToVector_getCurrentVersion_result__isset;

class KeyWordsToVector_getCurrentVersion_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  KeyWordsToVector_getCurrentVersion_result(const KeyWordsToVector_getCurrentVersion_result&);
  KeyWordsToVector_getCurrentVersion_result& operator=(const KeyWordsToVector_getCurrentVersion_result&);
  KeyWordsToVector_getCurrentVersion_result() : success(0) {
  }

  virtual ~KeyWordsToVector_getCurrentVersion_result() throw();
  int32_t success;

  _KeyWordsToVector_getCurrentVersion_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const KeyWordsToVector_getCurrentVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const KeyWordsToVector_getCurrentVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeyWordsToVector_getCurrentVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_getCurrentVersion_result& obj);
};

typedef struct _KeyWordsToVector_getCurrentVersion_presult__isset {
  _KeyWordsToVector_getCurrentVersion_presult__isset() : success(false) {}
  bool success :1;
} _KeyWordsToVector_getCurrentVersion_presult__isset;

class KeyWordsToVector_getCurrentVersion_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~KeyWordsToVector_getCurrentVersion_presult() throw();
  int32_t* success;

  _KeyWordsToVector_getCurrentVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_getCurrentVersion_presult& obj);
};

typedef struct _KeyWordsToVector_keywordsToVectorWithVersion_args__isset {
  _KeyWordsToVector_keywordsToVectorWithVersion_args__isset() : request(false), ktvVersion(false) {}
  bool request :1;
  bool ktvVersion :1;
} _KeyWordsToVector_keywordsToVectorWithVersion_args__isset;

class KeyWordsToVector_keywordsToVectorWithVersion_args {
 public:

  static const char* ascii_fingerprint; // = "8E8D4029D1BB36A01DC5FC1BE04578E9";
  static const uint8_t binary_fingerprint[16]; // = {0x8E,0x8D,0x40,0x29,0xD1,0xBB,0x36,0xA0,0x1D,0xC5,0xFC,0x1B,0xE0,0x45,0x78,0xE9};

  KeyWordsToVector_keywordsToVectorWithVersion_args(const KeyWordsToVector_keywordsToVectorWithVersion_args&);
  KeyWordsToVector_keywordsToVectorWithVersion_args& operator=(const KeyWordsToVector_keywordsToVectorWithVersion_args&);
  KeyWordsToVector_keywordsToVectorWithVersion_args() : ktvVersion(0) {
  }

  virtual ~KeyWordsToVector_keywordsToVectorWithVersion_args() throw();
  KeyWords request;
  int32_t ktvVersion;

  _KeyWordsToVector_keywordsToVectorWithVersion_args__isset __isset;

  void __set_request(const KeyWords& val);

  void __set_ktvVersion(const int32_t val);

  bool operator == (const KeyWordsToVector_keywordsToVectorWithVersion_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    if (!(ktvVersion == rhs.ktvVersion))
      return false;
    return true;
  }
  bool operator != (const KeyWordsToVector_keywordsToVectorWithVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeyWordsToVector_keywordsToVectorWithVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_keywordsToVectorWithVersion_args& obj);
};


class KeyWordsToVector_keywordsToVectorWithVersion_pargs {
 public:

  static const char* ascii_fingerprint; // = "8E8D4029D1BB36A01DC5FC1BE04578E9";
  static const uint8_t binary_fingerprint[16]; // = {0x8E,0x8D,0x40,0x29,0xD1,0xBB,0x36,0xA0,0x1D,0xC5,0xFC,0x1B,0xE0,0x45,0x78,0xE9};


  virtual ~KeyWordsToVector_keywordsToVectorWithVersion_pargs() throw();
  const KeyWords* request;
  const int32_t* ktvVersion;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_keywordsToVectorWithVersion_pargs& obj);
};

typedef struct _KeyWordsToVector_keywordsToVectorWithVersion_result__isset {
  _KeyWordsToVector_keywordsToVectorWithVersion_result__isset() : success(false) {}
  bool success :1;
} _KeyWordsToVector_keywordsToVectorWithVersion_result__isset;

class KeyWordsToVector_keywordsToVectorWithVersion_result {
 public:

  static const char* ascii_fingerprint; // = "FB6AC50F4D1F44E26A4B3F487215D228";
  static const uint8_t binary_fingerprint[16]; // = {0xFB,0x6A,0xC5,0x0F,0x4D,0x1F,0x44,0xE2,0x6A,0x4B,0x3F,0x48,0x72,0x15,0xD2,0x28};

  KeyWordsToVector_keywordsToVectorWithVersion_result(const KeyWordsToVector_keywordsToVectorWithVersion_result&);
  KeyWordsToVector_keywordsToVectorWithVersion_result& operator=(const KeyWordsToVector_keywordsToVectorWithVersion_result&);
  KeyWordsToVector_keywordsToVectorWithVersion_result() {
  }

  virtual ~KeyWordsToVector_keywordsToVectorWithVersion_result() throw();
  ResponseVector success;

  _KeyWordsToVector_keywordsToVectorWithVersion_result__isset __isset;

  void __set_success(const ResponseVector& val);

  bool operator == (const KeyWordsToVector_keywordsToVectorWithVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const KeyWordsToVector_keywordsToVectorWithVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeyWordsToVector_keywordsToVectorWithVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_keywordsToVectorWithVersion_result& obj);
};

typedef struct _KeyWordsToVector_keywordsToVectorWithVersion_presult__isset {
  _KeyWordsToVector_keywordsToVectorWithVersion_presult__isset() : success(false) {}
  bool success :1;
} _KeyWordsToVector_keywordsToVectorWithVersion_presult__isset;

class KeyWordsToVector_keywordsToVectorWithVersion_presult {
 public:

  static const char* ascii_fingerprint; // = "FB6AC50F4D1F44E26A4B3F487215D228";
  static const uint8_t binary_fingerprint[16]; // = {0xFB,0x6A,0xC5,0x0F,0x4D,0x1F,0x44,0xE2,0x6A,0x4B,0x3F,0x48,0x72,0x15,0xD2,0x28};


  virtual ~KeyWordsToVector_keywordsToVectorWithVersion_presult() throw();
  ResponseVector* success;

  _KeyWordsToVector_keywordsToVectorWithVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_keywordsToVectorWithVersion_presult& obj);
};

typedef struct _KeyWordsToVector_keywordsToVectorsWithVersion_args__isset {
  _KeyWordsToVector_keywordsToVectorsWithVersion_args__isset() : request(false), ktvVersion(false) {}
  bool request :1;
  bool ktvVersion :1;
} _KeyWordsToVector_keywordsToVectorsWithVersion_args__isset;

class KeyWordsToVector_keywordsToVectorsWithVersion_args {
 public:

  static const char* ascii_fingerprint; // = "52F3625E76D8490B414FAF3DBC1AF4B5";
  static const uint8_t binary_fingerprint[16]; // = {0x52,0xF3,0x62,0x5E,0x76,0xD8,0x49,0x0B,0x41,0x4F,0xAF,0x3D,0xBC,0x1A,0xF4,0xB5};

  KeyWordsToVector_keywordsToVectorsWithVersion_args(const KeyWordsToVector_keywordsToVectorsWithVersion_args&);
  KeyWordsToVector_keywordsToVectorsWithVersion_args& operator=(const KeyWordsToVector_keywordsToVectorsWithVersion_args&);
  KeyWordsToVector_keywordsToVectorsWithVersion_args() : ktvVersion(0) {
  }

  virtual ~KeyWordsToVector_keywordsToVectorsWithVersion_args() throw();
  std::vector<KeyWords>  request;
  int32_t ktvVersion;

  _KeyWordsToVector_keywordsToVectorsWithVersion_args__isset __isset;

  void __set_request(const std::vector<KeyWords> & val);

  void __set_ktvVersion(const int32_t val);

  bool operator == (const KeyWordsToVector_keywordsToVectorsWithVersion_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    if (!(ktvVersion == rhs.ktvVersion))
      return false;
    return true;
  }
  bool operator != (const KeyWordsToVector_keywordsToVectorsWithVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeyWordsToVector_keywordsToVectorsWithVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_keywordsToVectorsWithVersion_args& obj);
};


class KeyWordsToVector_keywordsToVectorsWithVersion_pargs {
 public:

  static const char* ascii_fingerprint; // = "52F3625E76D8490B414FAF3DBC1AF4B5";
  static const uint8_t binary_fingerprint[16]; // = {0x52,0xF3,0x62,0x5E,0x76,0xD8,0x49,0x0B,0x41,0x4F,0xAF,0x3D,0xBC,0x1A,0xF4,0xB5};


  virtual ~KeyWordsToVector_keywordsToVectorsWithVersion_pargs() throw();
  const std::vector<KeyWords> * request;
  const int32_t* ktvVersion;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_keywordsToVectorsWithVersion_pargs& obj);
};

typedef struct _KeyWordsToVector_keywordsToVectorsWithVersion_result__isset {
  _KeyWordsToVector_keywordsToVectorsWithVersion_result__isset() : success(false) {}
  bool success :1;
} _KeyWordsToVector_keywordsToVectorsWithVersion_result__isset;

class KeyWordsToVector_keywordsToVectorsWithVersion_result {
 public:

  static const char* ascii_fingerprint; // = "6F388E20270CE78BCB69B35C11683711";
  static const uint8_t binary_fingerprint[16]; // = {0x6F,0x38,0x8E,0x20,0x27,0x0C,0xE7,0x8B,0xCB,0x69,0xB3,0x5C,0x11,0x68,0x37,0x11};

  KeyWordsToVector_keywordsToVectorsWithVersion_result(const KeyWordsToVector_keywordsToVectorsWithVersion_result&);
  KeyWordsToVector_keywordsToVectorsWithVersion_result& operator=(const KeyWordsToVector_keywordsToVectorsWithVersion_result&);
  KeyWordsToVector_keywordsToVectorsWithVersion_result() {
  }

  virtual ~KeyWordsToVector_keywordsToVectorsWithVersion_result() throw();
  std::vector<ResponseVector>  success;

  _KeyWordsToVector_keywordsToVectorsWithVersion_result__isset __isset;

  void __set_success(const std::vector<ResponseVector> & val);

  bool operator == (const KeyWordsToVector_keywordsToVectorsWithVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const KeyWordsToVector_keywordsToVectorsWithVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeyWordsToVector_keywordsToVectorsWithVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_keywordsToVectorsWithVersion_result& obj);
};

typedef struct _KeyWordsToVector_keywordsToVectorsWithVersion_presult__isset {
  _KeyWordsToVector_keywordsToVectorsWithVersion_presult__isset() : success(false) {}
  bool success :1;
} _KeyWordsToVector_keywordsToVectorsWithVersion_presult__isset;

class KeyWordsToVector_keywordsToVectorsWithVersion_presult {
 public:

  static const char* ascii_fingerprint; // = "6F388E20270CE78BCB69B35C11683711";
  static const uint8_t binary_fingerprint[16]; // = {0x6F,0x38,0x8E,0x20,0x27,0x0C,0xE7,0x8B,0xCB,0x69,0xB3,0x5C,0x11,0x68,0x37,0x11};


  virtual ~KeyWordsToVector_keywordsToVectorsWithVersion_presult() throw();
  std::vector<ResponseVector> * success;

  _KeyWordsToVector_keywordsToVectorsWithVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_keywordsToVectorsWithVersion_presult& obj);
};

typedef struct _KeyWordsToVector_keywordCreativeToFeatures_args__isset {
  _KeyWordsToVector_keywordCreativeToFeatures_args__isset() : request(false) {}
  bool request :1;
} _KeyWordsToVector_keywordCreativeToFeatures_args__isset;

class KeyWordsToVector_keywordCreativeToFeatures_args {
 public:

  static const char* ascii_fingerprint; // = "EDEF5A7006820A36C60BD92BBAE52C43";
  static const uint8_t binary_fingerprint[16]; // = {0xED,0xEF,0x5A,0x70,0x06,0x82,0x0A,0x36,0xC6,0x0B,0xD9,0x2B,0xBA,0xE5,0x2C,0x43};

  KeyWordsToVector_keywordCreativeToFeatures_args(const KeyWordsToVector_keywordCreativeToFeatures_args&);
  KeyWordsToVector_keywordCreativeToFeatures_args& operator=(const KeyWordsToVector_keywordCreativeToFeatures_args&);
  KeyWordsToVector_keywordCreativeToFeatures_args() {
  }

  virtual ~KeyWordsToVector_keywordCreativeToFeatures_args() throw();
  KeywordCreative request;

  _KeyWordsToVector_keywordCreativeToFeatures_args__isset __isset;

  void __set_request(const KeywordCreative& val);

  bool operator == (const KeyWordsToVector_keywordCreativeToFeatures_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const KeyWordsToVector_keywordCreativeToFeatures_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeyWordsToVector_keywordCreativeToFeatures_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_keywordCreativeToFeatures_args& obj);
};


class KeyWordsToVector_keywordCreativeToFeatures_pargs {
 public:

  static const char* ascii_fingerprint; // = "EDEF5A7006820A36C60BD92BBAE52C43";
  static const uint8_t binary_fingerprint[16]; // = {0xED,0xEF,0x5A,0x70,0x06,0x82,0x0A,0x36,0xC6,0x0B,0xD9,0x2B,0xBA,0xE5,0x2C,0x43};


  virtual ~KeyWordsToVector_keywordCreativeToFeatures_pargs() throw();
  const KeywordCreative* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_keywordCreativeToFeatures_pargs& obj);
};

typedef struct _KeyWordsToVector_keywordCreativeToFeatures_result__isset {
  _KeyWordsToVector_keywordCreativeToFeatures_result__isset() : success(false) {}
  bool success :1;
} _KeyWordsToVector_keywordCreativeToFeatures_result__isset;

class KeyWordsToVector_keywordCreativeToFeatures_result {
 public:

  static const char* ascii_fingerprint; // = "BD5C8ECB2CE6CB52C08381AFEEB88D34";
  static const uint8_t binary_fingerprint[16]; // = {0xBD,0x5C,0x8E,0xCB,0x2C,0xE6,0xCB,0x52,0xC0,0x83,0x81,0xAF,0xEE,0xB8,0x8D,0x34};

  KeyWordsToVector_keywordCreativeToFeatures_result(const KeyWordsToVector_keywordCreativeToFeatures_result&);
  KeyWordsToVector_keywordCreativeToFeatures_result& operator=(const KeyWordsToVector_keywordCreativeToFeatures_result&);
  KeyWordsToVector_keywordCreativeToFeatures_result() {
  }

  virtual ~KeyWordsToVector_keywordCreativeToFeatures_result() throw();
  KeywordCreativeResponse success;

  _KeyWordsToVector_keywordCreativeToFeatures_result__isset __isset;

  void __set_success(const KeywordCreativeResponse& val);

  bool operator == (const KeyWordsToVector_keywordCreativeToFeatures_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const KeyWordsToVector_keywordCreativeToFeatures_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeyWordsToVector_keywordCreativeToFeatures_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_keywordCreativeToFeatures_result& obj);
};

typedef struct _KeyWordsToVector_keywordCreativeToFeatures_presult__isset {
  _KeyWordsToVector_keywordCreativeToFeatures_presult__isset() : success(false) {}
  bool success :1;
} _KeyWordsToVector_keywordCreativeToFeatures_presult__isset;

class KeyWordsToVector_keywordCreativeToFeatures_presult {
 public:

  static const char* ascii_fingerprint; // = "BD5C8ECB2CE6CB52C08381AFEEB88D34";
  static const uint8_t binary_fingerprint[16]; // = {0xBD,0x5C,0x8E,0xCB,0x2C,0xE6,0xCB,0x52,0xC0,0x83,0x81,0xAF,0xEE,0xB8,0x8D,0x34};


  virtual ~KeyWordsToVector_keywordCreativeToFeatures_presult() throw();
  KeywordCreativeResponse* success;

  _KeyWordsToVector_keywordCreativeToFeatures_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_keywordCreativeToFeatures_presult& obj);
};

typedef struct _KeyWordsToVector_batchKeywordCreativeToFeatures_args__isset {
  _KeyWordsToVector_batchKeywordCreativeToFeatures_args__isset() : request(false) {}
  bool request :1;
} _KeyWordsToVector_batchKeywordCreativeToFeatures_args__isset;

class KeyWordsToVector_batchKeywordCreativeToFeatures_args {
 public:

  static const char* ascii_fingerprint; // = "04A8D132B2F82539448B793FDB33B5AB";
  static const uint8_t binary_fingerprint[16]; // = {0x04,0xA8,0xD1,0x32,0xB2,0xF8,0x25,0x39,0x44,0x8B,0x79,0x3F,0xDB,0x33,0xB5,0xAB};

  KeyWordsToVector_batchKeywordCreativeToFeatures_args(const KeyWordsToVector_batchKeywordCreativeToFeatures_args&);
  KeyWordsToVector_batchKeywordCreativeToFeatures_args& operator=(const KeyWordsToVector_batchKeywordCreativeToFeatures_args&);
  KeyWordsToVector_batchKeywordCreativeToFeatures_args() {
  }

  virtual ~KeyWordsToVector_batchKeywordCreativeToFeatures_args() throw();
  std::vector<KeywordCreative>  request;

  _KeyWordsToVector_batchKeywordCreativeToFeatures_args__isset __isset;

  void __set_request(const std::vector<KeywordCreative> & val);

  bool operator == (const KeyWordsToVector_batchKeywordCreativeToFeatures_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const KeyWordsToVector_batchKeywordCreativeToFeatures_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeyWordsToVector_batchKeywordCreativeToFeatures_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_batchKeywordCreativeToFeatures_args& obj);
};


class KeyWordsToVector_batchKeywordCreativeToFeatures_pargs {
 public:

  static const char* ascii_fingerprint; // = "04A8D132B2F82539448B793FDB33B5AB";
  static const uint8_t binary_fingerprint[16]; // = {0x04,0xA8,0xD1,0x32,0xB2,0xF8,0x25,0x39,0x44,0x8B,0x79,0x3F,0xDB,0x33,0xB5,0xAB};


  virtual ~KeyWordsToVector_batchKeywordCreativeToFeatures_pargs() throw();
  const std::vector<KeywordCreative> * request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_batchKeywordCreativeToFeatures_pargs& obj);
};

typedef struct _KeyWordsToVector_batchKeywordCreativeToFeatures_result__isset {
  _KeyWordsToVector_batchKeywordCreativeToFeatures_result__isset() : success(false) {}
  bool success :1;
} _KeyWordsToVector_batchKeywordCreativeToFeatures_result__isset;

class KeyWordsToVector_batchKeywordCreativeToFeatures_result {
 public:

  static const char* ascii_fingerprint; // = "B9D04D2FF714919E5B90ABF2F5782136";
  static const uint8_t binary_fingerprint[16]; // = {0xB9,0xD0,0x4D,0x2F,0xF7,0x14,0x91,0x9E,0x5B,0x90,0xAB,0xF2,0xF5,0x78,0x21,0x36};

  KeyWordsToVector_batchKeywordCreativeToFeatures_result(const KeyWordsToVector_batchKeywordCreativeToFeatures_result&);
  KeyWordsToVector_batchKeywordCreativeToFeatures_result& operator=(const KeyWordsToVector_batchKeywordCreativeToFeatures_result&);
  KeyWordsToVector_batchKeywordCreativeToFeatures_result() {
  }

  virtual ~KeyWordsToVector_batchKeywordCreativeToFeatures_result() throw();
  std::vector<KeywordCreativeResponse>  success;

  _KeyWordsToVector_batchKeywordCreativeToFeatures_result__isset __isset;

  void __set_success(const std::vector<KeywordCreativeResponse> & val);

  bool operator == (const KeyWordsToVector_batchKeywordCreativeToFeatures_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const KeyWordsToVector_batchKeywordCreativeToFeatures_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeyWordsToVector_batchKeywordCreativeToFeatures_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_batchKeywordCreativeToFeatures_result& obj);
};

typedef struct _KeyWordsToVector_batchKeywordCreativeToFeatures_presult__isset {
  _KeyWordsToVector_batchKeywordCreativeToFeatures_presult__isset() : success(false) {}
  bool success :1;
} _KeyWordsToVector_batchKeywordCreativeToFeatures_presult__isset;

class KeyWordsToVector_batchKeywordCreativeToFeatures_presult {
 public:

  static const char* ascii_fingerprint; // = "B9D04D2FF714919E5B90ABF2F5782136";
  static const uint8_t binary_fingerprint[16]; // = {0xB9,0xD0,0x4D,0x2F,0xF7,0x14,0x91,0x9E,0x5B,0x90,0xAB,0xF2,0xF5,0x78,0x21,0x36};


  virtual ~KeyWordsToVector_batchKeywordCreativeToFeatures_presult() throw();
  std::vector<KeywordCreativeResponse> * success;

  _KeyWordsToVector_batchKeywordCreativeToFeatures_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_batchKeywordCreativeToFeatures_presult& obj);
};

typedef struct _KeyWordsToVector_reloadKeywordCreativeConfigure_args__isset {
  _KeyWordsToVector_reloadKeywordCreativeConfigure_args__isset() : conf(false) {}
  bool conf :1;
} _KeyWordsToVector_reloadKeywordCreativeConfigure_args__isset;

class KeyWordsToVector_reloadKeywordCreativeConfigure_args {
 public:

  static const char* ascii_fingerprint; // = "5EA2D527ECA3BA20C77AFC023EE8C05F";
  static const uint8_t binary_fingerprint[16]; // = {0x5E,0xA2,0xD5,0x27,0xEC,0xA3,0xBA,0x20,0xC7,0x7A,0xFC,0x02,0x3E,0xE8,0xC0,0x5F};

  KeyWordsToVector_reloadKeywordCreativeConfigure_args(const KeyWordsToVector_reloadKeywordCreativeConfigure_args&);
  KeyWordsToVector_reloadKeywordCreativeConfigure_args& operator=(const KeyWordsToVector_reloadKeywordCreativeConfigure_args&);
  KeyWordsToVector_reloadKeywordCreativeConfigure_args() {
  }

  virtual ~KeyWordsToVector_reloadKeywordCreativeConfigure_args() throw();
  std::map<std::string, std::string>  conf;

  _KeyWordsToVector_reloadKeywordCreativeConfigure_args__isset __isset;

  void __set_conf(const std::map<std::string, std::string> & val);

  bool operator == (const KeyWordsToVector_reloadKeywordCreativeConfigure_args & rhs) const
  {
    if (!(conf == rhs.conf))
      return false;
    return true;
  }
  bool operator != (const KeyWordsToVector_reloadKeywordCreativeConfigure_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeyWordsToVector_reloadKeywordCreativeConfigure_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_reloadKeywordCreativeConfigure_args& obj);
};


class KeyWordsToVector_reloadKeywordCreativeConfigure_pargs {
 public:

  static const char* ascii_fingerprint; // = "5EA2D527ECA3BA20C77AFC023EE8C05F";
  static const uint8_t binary_fingerprint[16]; // = {0x5E,0xA2,0xD5,0x27,0xEC,0xA3,0xBA,0x20,0xC7,0x7A,0xFC,0x02,0x3E,0xE8,0xC0,0x5F};


  virtual ~KeyWordsToVector_reloadKeywordCreativeConfigure_pargs() throw();
  const std::map<std::string, std::string> * conf;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_reloadKeywordCreativeConfigure_pargs& obj);
};

typedef struct _KeyWordsToVector_reloadKeywordCreativeConfigure_result__isset {
  _KeyWordsToVector_reloadKeywordCreativeConfigure_result__isset() : success(false) {}
  bool success :1;
} _KeyWordsToVector_reloadKeywordCreativeConfigure_result__isset;

class KeyWordsToVector_reloadKeywordCreativeConfigure_result {
 public:

  static const char* ascii_fingerprint; // = "3C2CE52840016AA59F143EA313E72A8C";
  static const uint8_t binary_fingerprint[16]; // = {0x3C,0x2C,0xE5,0x28,0x40,0x01,0x6A,0xA5,0x9F,0x14,0x3E,0xA3,0x13,0xE7,0x2A,0x8C};

  KeyWordsToVector_reloadKeywordCreativeConfigure_result(const KeyWordsToVector_reloadKeywordCreativeConfigure_result&);
  KeyWordsToVector_reloadKeywordCreativeConfigure_result& operator=(const KeyWordsToVector_reloadKeywordCreativeConfigure_result&);
  KeyWordsToVector_reloadKeywordCreativeConfigure_result() {
  }

  virtual ~KeyWordsToVector_reloadKeywordCreativeConfigure_result() throw();
  Response success;

  _KeyWordsToVector_reloadKeywordCreativeConfigure_result__isset __isset;

  void __set_success(const Response& val);

  bool operator == (const KeyWordsToVector_reloadKeywordCreativeConfigure_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const KeyWordsToVector_reloadKeywordCreativeConfigure_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeyWordsToVector_reloadKeywordCreativeConfigure_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_reloadKeywordCreativeConfigure_result& obj);
};

typedef struct _KeyWordsToVector_reloadKeywordCreativeConfigure_presult__isset {
  _KeyWordsToVector_reloadKeywordCreativeConfigure_presult__isset() : success(false) {}
  bool success :1;
} _KeyWordsToVector_reloadKeywordCreativeConfigure_presult__isset;

class KeyWordsToVector_reloadKeywordCreativeConfigure_presult {
 public:

  static const char* ascii_fingerprint; // = "3C2CE52840016AA59F143EA313E72A8C";
  static const uint8_t binary_fingerprint[16]; // = {0x3C,0x2C,0xE5,0x28,0x40,0x01,0x6A,0xA5,0x9F,0x14,0x3E,0xA3,0x13,0xE7,0x2A,0x8C};


  virtual ~KeyWordsToVector_reloadKeywordCreativeConfigure_presult() throw();
  Response* success;

  _KeyWordsToVector_reloadKeywordCreativeConfigure_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const KeyWordsToVector_reloadKeywordCreativeConfigure_presult& obj);
};

class KeyWordsToVectorClient : virtual public KeyWordsToVectorIf {
 public:
  KeyWordsToVectorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  KeyWordsToVectorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void keywordsToVector(ResponseVector& _return, const KeyWords& request);
  void send_keywordsToVector(const KeyWords& request);
  void recv_keywordsToVector(ResponseVector& _return);
  void keywordsToVectors(std::vector<ResponseVector> & _return, const std::vector<KeyWords> & request);
  void send_keywordsToVectors(const std::vector<KeyWords> & request);
  void recv_keywordsToVectors(std::vector<ResponseVector> & _return);
  void reload(Response& _return, const std::map<std::string, std::string> & conf);
  void send_reload(const std::map<std::string, std::string> & conf);
  void recv_reload(Response& _return);
  PeerStatus::type GetPeerStatus();
  void send_GetPeerStatus();
  PeerStatus::type recv_GetPeerStatus();
  int32_t getCurrentVersion();
  void send_getCurrentVersion();
  int32_t recv_getCurrentVersion();
  void keywordsToVectorWithVersion(ResponseVector& _return, const KeyWords& request, const int32_t ktvVersion);
  void send_keywordsToVectorWithVersion(const KeyWords& request, const int32_t ktvVersion);
  void recv_keywordsToVectorWithVersion(ResponseVector& _return);
  void keywordsToVectorsWithVersion(std::vector<ResponseVector> & _return, const std::vector<KeyWords> & request, const int32_t ktvVersion);
  void send_keywordsToVectorsWithVersion(const std::vector<KeyWords> & request, const int32_t ktvVersion);
  void recv_keywordsToVectorsWithVersion(std::vector<ResponseVector> & _return);
  void keywordCreativeToFeatures(KeywordCreativeResponse& _return, const KeywordCreative& request);
  void send_keywordCreativeToFeatures(const KeywordCreative& request);
  void recv_keywordCreativeToFeatures(KeywordCreativeResponse& _return);
  void batchKeywordCreativeToFeatures(std::vector<KeywordCreativeResponse> & _return, const std::vector<KeywordCreative> & request);
  void send_batchKeywordCreativeToFeatures(const std::vector<KeywordCreative> & request);
  void recv_batchKeywordCreativeToFeatures(std::vector<KeywordCreativeResponse> & _return);
  void reloadKeywordCreativeConfigure(Response& _return, const std::map<std::string, std::string> & conf);
  void send_reloadKeywordCreativeConfigure(const std::map<std::string, std::string> & conf);
  void recv_reloadKeywordCreativeConfigure(Response& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class KeyWordsToVectorProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<KeyWordsToVectorIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (KeyWordsToVectorProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_keywordsToVector(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_keywordsToVectors(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reload(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetPeerStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCurrentVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_keywordsToVectorWithVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_keywordsToVectorsWithVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_keywordCreativeToFeatures(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_batchKeywordCreativeToFeatures(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reloadKeywordCreativeConfigure(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  KeyWordsToVectorProcessor(boost::shared_ptr<KeyWordsToVectorIf> iface) :
    iface_(iface) {
    processMap_["keywordsToVector"] = &KeyWordsToVectorProcessor::process_keywordsToVector;
    processMap_["keywordsToVectors"] = &KeyWordsToVectorProcessor::process_keywordsToVectors;
    processMap_["reload"] = &KeyWordsToVectorProcessor::process_reload;
    processMap_["GetPeerStatus"] = &KeyWordsToVectorProcessor::process_GetPeerStatus;
    processMap_["getCurrentVersion"] = &KeyWordsToVectorProcessor::process_getCurrentVersion;
    processMap_["keywordsToVectorWithVersion"] = &KeyWordsToVectorProcessor::process_keywordsToVectorWithVersion;
    processMap_["keywordsToVectorsWithVersion"] = &KeyWordsToVectorProcessor::process_keywordsToVectorsWithVersion;
    processMap_["keywordCreativeToFeatures"] = &KeyWordsToVectorProcessor::process_keywordCreativeToFeatures;
    processMap_["batchKeywordCreativeToFeatures"] = &KeyWordsToVectorProcessor::process_batchKeywordCreativeToFeatures;
    processMap_["reloadKeywordCreativeConfigure"] = &KeyWordsToVectorProcessor::process_reloadKeywordCreativeConfigure;
  }

  virtual ~KeyWordsToVectorProcessor() {}
};

class KeyWordsToVectorProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  KeyWordsToVectorProcessorFactory(const ::boost::shared_ptr< KeyWordsToVectorIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< KeyWordsToVectorIfFactory > handlerFactory_;
};

class KeyWordsToVectorMultiface : virtual public KeyWordsToVectorIf {
 public:
  KeyWordsToVectorMultiface(std::vector<boost::shared_ptr<KeyWordsToVectorIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~KeyWordsToVectorMultiface() {}
 protected:
  std::vector<boost::shared_ptr<KeyWordsToVectorIf> > ifaces_;
  KeyWordsToVectorMultiface() {}
  void add(boost::shared_ptr<KeyWordsToVectorIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void keywordsToVector(ResponseVector& _return, const KeyWords& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->keywordsToVector(_return, request);
    }
    ifaces_[i]->keywordsToVector(_return, request);
    return;
  }

  void keywordsToVectors(std::vector<ResponseVector> & _return, const std::vector<KeyWords> & request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->keywordsToVectors(_return, request);
    }
    ifaces_[i]->keywordsToVectors(_return, request);
    return;
  }

  void reload(Response& _return, const std::map<std::string, std::string> & conf) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reload(_return, conf);
    }
    ifaces_[i]->reload(_return, conf);
    return;
  }

  PeerStatus::type GetPeerStatus() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetPeerStatus();
    }
    return ifaces_[i]->GetPeerStatus();
  }

  int32_t getCurrentVersion() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCurrentVersion();
    }
    return ifaces_[i]->getCurrentVersion();
  }

  void keywordsToVectorWithVersion(ResponseVector& _return, const KeyWords& request, const int32_t ktvVersion) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->keywordsToVectorWithVersion(_return, request, ktvVersion);
    }
    ifaces_[i]->keywordsToVectorWithVersion(_return, request, ktvVersion);
    return;
  }

  void keywordsToVectorsWithVersion(std::vector<ResponseVector> & _return, const std::vector<KeyWords> & request, const int32_t ktvVersion) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->keywordsToVectorsWithVersion(_return, request, ktvVersion);
    }
    ifaces_[i]->keywordsToVectorsWithVersion(_return, request, ktvVersion);
    return;
  }

  void keywordCreativeToFeatures(KeywordCreativeResponse& _return, const KeywordCreative& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->keywordCreativeToFeatures(_return, request);
    }
    ifaces_[i]->keywordCreativeToFeatures(_return, request);
    return;
  }

  void batchKeywordCreativeToFeatures(std::vector<KeywordCreativeResponse> & _return, const std::vector<KeywordCreative> & request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->batchKeywordCreativeToFeatures(_return, request);
    }
    ifaces_[i]->batchKeywordCreativeToFeatures(_return, request);
    return;
  }

  void reloadKeywordCreativeConfigure(Response& _return, const std::map<std::string, std::string> & conf) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reloadKeywordCreativeConfigure(_return, conf);
    }
    ifaces_[i]->reloadKeywordCreativeConfigure(_return, conf);
    return;
  }

};

}}} // namespace

#endif
